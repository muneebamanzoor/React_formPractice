{"ast":null,"code":"import React from \"react\";\n// var React = require(\"react\");\nimport ReactDOM from 'react-dom';\n// var ReactDOM = require(\"react-dom\");\n// ReactDOM.render('kya dikhana hai', 'kahan dikhana hai', 'callback func')\n\n// 1st Way of rendering \n// With the help of React we can use rendor method and with te help of ReactDOM we can use JSX\n// ReactDOM.render(\n//   <h1>Hello World</h1> , document.getElementById(\"root\")\n// );\n\n// 2nd Way of rendering \n// The code that Babel JS compile on the backend to make it understandable \n// import { jsx as _jsx } from \"react/jsx-runtime\";\n// ReactDOM.render( jsx(\"h1\", {\n//   children: \"Hello World\"\n// }), document.getElementById(\"root\"));\n\n// 3rd Way of rendering \n// Manually using only Javascript to create and render h1 element\n// var h1 = document.createElement('h1');\n// h1.innerHTML='Muneeba Manzoor';\n// document.getElementById('root').appendChild(h1)\n\n// // ----------- Rendering Multiple Elements within a render() --------------\n// ReactDOM.render( \n//   <div>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a div tag to wrap all the element tags into te main div tag</p>\n//   </div> , document.getElementById('root'))\n\n// In v16.X.X of react, its possible for render to return an array of elements/\n// ReactDOM.render( [\n//   <h1>Rendering two elements Together with the help of Array</h1>,\n//   <p>Use a Square Bracket to wrap all the element tags into the main div tag separated by commas</p>,\n//   ], document.getElementById('root'))\n\n// // --------- React.Fragment -----------\n// ReactDOM.render( \n//   <React.Fragment>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a React.Fragment tag or empty tags \"< ></>\" to wrap all the element tags into te main tag</p>\n//   </React.Fragment> , document.getElementById('root'))\n\n// // ---------- Challenge Time ------------\n// ReactDOM.render(\n//   <>\n//     <h1>Netflix Series</h1>\n//     <p>A list of top 5 series on Netflix:</p>\n//     <ol>\n//       <li>Prison Break</li>\n//       <li>Money Heist</li>\n//       <li>YOU</li>\n//       <li>Breaking Bad</li>\n//       <li>Farzi</li>\n//     </ol>\n//   </>\n//   , document.getElementById('root')\n// )\n\n// ----------- Using JS expressions in JSX using {} -----------\n// We can not write statements in {}\n// var myname = \"Muneeba Manzoor\";\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {myname}</p>\n//   <p>The sum of two numbers is {2+3}</p>\n//   <p>A random number {Math.random()}</p>\n//   </> , document.getElementById('root'));\n\n// ------------ Template Literals ------------\n// var myname = \"Muneeba Manzoor\";\n// var myAge=23;\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {`${myname} and my age is ${myAge}`}</p>\n//   <p>My name is {myname} and my age is {myAge}</p>\n//   <p>{myname + myAge}</p>\n//   </> , document.getElementById('root'));\n\n// -------- Challenge Time-----------\n// var currdatetime = new Date();\n// var currdate = currdatetime.toLocaleDateString();\n// var currtime = currdatetime.toLocaleTimeString();\n// var myName = \"Muneeba Manzoor\"\n// ReactDOM.render( \n//   <>\n//     <h1>My Name is {myName}</h1>\n//     <p>{`The current date is ${currdate}`}</p>\n//     <p>{`The current time is ${currtime}`}</p>\n//   </> , document.getElementById(\"root\")\n// )\n\n// ------------ JSX Attributes --------------\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));","map":{"version":3,"names":["React","ReactDOM","Fragment","_Fragment","jsxDEV","_jsxDEV","render"],"sources":["D:/ReactCourse/reactfirst/src/index.js"],"sourcesContent":["import React from \"react\";\n// var React = require(\"react\");\nimport ReactDOM from 'react-dom';\n// var ReactDOM = require(\"react-dom\");\n// ReactDOM.render('kya dikhana hai', 'kahan dikhana hai', 'callback func')\n\n// 1st Way of rendering \n// With the help of React we can use rendor method and with te help of ReactDOM we can use JSX\n// ReactDOM.render(\n//   <h1>Hello World</h1> , document.getElementById(\"root\")\n// );\n\n// 2nd Way of rendering \n// The code that Babel JS compile on the backend to make it understandable \n// import { jsx as _jsx } from \"react/jsx-runtime\";\n// ReactDOM.render( jsx(\"h1\", {\n//   children: \"Hello World\"\n// }), document.getElementById(\"root\"));\n\n// 3rd Way of rendering \n// Manually using only Javascript to create and render h1 element\n// var h1 = document.createElement('h1');\n// h1.innerHTML='Muneeba Manzoor';\n// document.getElementById('root').appendChild(h1)\n\n// // ----------- Rendering Multiple Elements within a render() --------------\n// ReactDOM.render( \n//   <div>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a div tag to wrap all the element tags into te main div tag</p>\n//   </div> , document.getElementById('root'))\n\n// In v16.X.X of react, its possible for render to return an array of elements/\n// ReactDOM.render( [\n//   <h1>Rendering two elements Together with the help of Array</h1>,\n//   <p>Use a Square Bracket to wrap all the element tags into the main div tag separated by commas</p>,\n//   ], document.getElementById('root'))\n\n// // --------- React.Fragment -----------\n// ReactDOM.render( \n//   <React.Fragment>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a React.Fragment tag or empty tags \"< ></>\" to wrap all the element tags into te main tag</p>\n//   </React.Fragment> , document.getElementById('root'))\n\n// // ---------- Challenge Time ------------\n// ReactDOM.render(\n//   <>\n//     <h1>Netflix Series</h1>\n//     <p>A list of top 5 series on Netflix:</p>\n//     <ol>\n//       <li>Prison Break</li>\n//       <li>Money Heist</li>\n//       <li>YOU</li>\n//       <li>Breaking Bad</li>\n//       <li>Farzi</li>\n//     </ol>\n//   </>\n//   , document.getElementById('root')\n// )\n\n// ----------- Using JS expressions in JSX using {} -----------\n// We can not write statements in {}\n// var myname = \"Muneeba Manzoor\";\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {myname}</p>\n//   <p>The sum of two numbers is {2+3}</p>\n//   <p>A random number {Math.random()}</p>\n//   </> , document.getElementById('root'));\n\n// ------------ Template Literals ------------\n// var myname = \"Muneeba Manzoor\";\n// var myAge=23;\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {`${myname} and my age is ${myAge}`}</p>\n//   <p>My name is {myname} and my age is {myAge}</p>\n//   <p>{myname + myAge}</p>\n//   </> , document.getElementById('root'));\n\n\n// -------- Challenge Time-----------\n// var currdatetime = new Date();\n// var currdate = currdatetime.toLocaleDateString();\n// var currtime = currdatetime.toLocaleTimeString();\n// var myName = \"Muneeba Manzoor\"\n// ReactDOM.render( \n//   <>\n//     <h1>My Name is {myName}</h1>\n//     <p>{`The current date is ${currdate}`}</p>\n//     <p>{`The current time is ${currtime}`}</p>\n//   </> , document.getElementById(\"root\")\n// )\n\n\n// ------------ JSX Attributes --------------\nReactDOM.render(<>\n  \n</>)"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,QAAQ,MAAM,WAAW;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAJ,QAAQ,CAACK,MAAM,eAACD,OAAA,CAAAF,SAAA,oBAEb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
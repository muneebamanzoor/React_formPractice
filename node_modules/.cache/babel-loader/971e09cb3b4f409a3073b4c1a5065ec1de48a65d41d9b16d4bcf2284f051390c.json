{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactCourse\\\\reactfirst\\\\src\\\\index.js\";\nimport React from \"react\"; // var React = require(\"react\");\nimport ReactDOM from 'react-dom'; // var ReactDOM = require(\"react-dom\");\nimport \"./index.css\";\n\n// ReactDOM.render('kya dikhana hai', 'kahan dikhana hai', 'callback func')\n// 1st Way of rendering \n// With the help of React we can use rendor method and with te help of ReactDOM we can use JSX\n// ReactDOM.render(\n//   <h1>Hello World</h1> , document.getElementById(\"root\")\n// );\n\n// 2nd Way of rendering \n// The code that Babel JS compile on the backend to make it understandable \n// import { jsx as _jsx } from \"react/jsx-runtime\";\n// ReactDOM.render( jsx(\"h1\", {\n//   children: \"Hello World\"\n// }), document.getElementById(\"root\"));\n\n// 3rd Way of rendering \n// Manually using only Javascript to create and render h1 element\n// var h1 = document.createElement('h1');\n// h1.innerHTML='Muneeba Manzoor';\n// document.getElementById('root').appendChild(h1)\n\n// // ----------- Rendering Multiple Elements within a render() --------------\n// ReactDOM.render( \n//   <div>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a div tag to wrap all the element tags into te main div tag</p>\n//   </div> , document.getElementById('root'))\n\n// In v16.X.X of react, its possible for render to return an array of elements/\n// ReactDOM.render( [\n//   <h1>Rendering two elements Together with the help of Array</h1>,\n//   <p>Use a Square Bracket to wrap all the element tags into the main div tag separated by commas</p>,\n//   ], document.getElementById('root'))\n\n// // --------- React.Fragment -----------\n// ReactDOM.render( \n//   <React.Fragment>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a React.Fragment tag or empty tags \"< ></>\" to wrap all the element tags into te main tag</p>\n//   </React.Fragment> , document.getElementById('root'))\n\n// // ---------- Challenge Time ------------\n// ReactDOM.render(\n//   <>\n//     <h1>Netflix Series</h1>\n//     <p>A list of top 5 series on Netflix:</p>\n//     <ol>\n//       <li>Prison Break</li>\n//       <li>Money Heist</li>\n//       <li>YOU</li>\n//       <li>Breaking Bad</li>\n//       <li>Farzi</li>\n//     </ol>\n//   </>\n//   , document.getElementById('root')\n// )\n\n// ----------- Using JS expressions in JSX using {} -----------\n// We can not write statements in {}\n// var myname = \"Muneeba Manzoor\";\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {myname}</p>\n//   <p>The sum of two numbers is {2+3}</p>\n//   <p>A random number {Math.random()}</p>\n//   </> , document.getElementById('root'));\n\n// ------------ Template Literals ------------\n// var myname = \"Muneeba Manzoor\";\n// var myAge=23;\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {`${myname} and my age is ${myAge}`}</p>\n//   <p>My name is {myname} and my age is {myAge}</p>\n//   <p>{myname + myAge}</p>\n//   </> , document.getElementById('root'));\n\n// -------- Challenge Time-----------\n// var currdatetime = new Date();\n// var currdate = currdatetime.toLocaleDateString();\n// var currtime = currdatetime.toLocaleTimeString();\n// var myName = \"Muneeba Manzoor\"\n// ReactDOM.render( \n//   <>\n//     <h1>My Name is {myName}</h1>\n//     <p>{`The current date is ${currdate}`}</p>\n//     <p>{`The current time is ${currtime}`}</p>\n//   </> , document.getElementById(\"root\")\n// );\n\n// ------------ JSX Attributes --------------\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <p contentEditable=\"true\">This part is all about JSX Attributes</p>\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </> , document.getElementById(\"root\"));\n\n// ---------- CSS Styling and importing CSS files --------------\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <h1 className=\"para\">This part is all about JSX Attributes</h1>\n//   <div className=\"image-div\">\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </div>\n//   </> , document.getElementById(\"root\"));\n\n//-------- Inline and Internal CSS -----------\n// For inline CSS, an object with CSS code is to be created and then the object should be referenced in style tag\n// const heading = {   textAlign: 'center',\n//   color: 'brown',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: '0px 2px 4px rgb(224, 67, 20)',\n//   margin: '50px 0',\n//   fontFamily: \"'Josefin Sans', sans-serif\"\n// }\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <h1 style={heading}>This part is all about JSX Attributes</h1>\n//   <div className=\"image-div\">\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </div>\n//   </> , document.getElementById(\"root\"));\n\n// ------------- Challenge Time - Creating Simple Greeting Website using React JS --------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst currdatetime = new Date();\nconst currtime = currdatetime.getHours();\nvar timeNow;\nlet cssStyle = {};\nif (currtime >= 1 && currtime < 12) {\n  timeNow = \"Good Morning\";\n  cssStyle.append('colo');\n} else if (currtime >= 12 && currtime < 19) {\n  timeNow = \"Good Evening\";\n} else if (currtime >= 19 && currtime < 1) {\n  timeNow = \"Good Night\";\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `Hello Sir, ${timeNow}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this)\n}, void 0, false), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","Fragment","_Fragment","currdatetime","Date","currtime","getHours","timeNow","cssStyle","append","render","children","className","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById"],"sources":["D:/ReactCourse/reactfirst/src/index.js"],"sourcesContent":["import React from \"react\"; // var React = require(\"react\");\nimport ReactDOM from 'react-dom'; // var ReactDOM = require(\"react-dom\");\nimport \"./index.css\"\n\n\n// ReactDOM.render('kya dikhana hai', 'kahan dikhana hai', 'callback func')\n// 1st Way of rendering \n// With the help of React we can use rendor method and with te help of ReactDOM we can use JSX\n// ReactDOM.render(\n//   <h1>Hello World</h1> , document.getElementById(\"root\")\n// );\n\n// 2nd Way of rendering \n// The code that Babel JS compile on the backend to make it understandable \n// import { jsx as _jsx } from \"react/jsx-runtime\";\n// ReactDOM.render( jsx(\"h1\", {\n//   children: \"Hello World\"\n// }), document.getElementById(\"root\"));\n\n// 3rd Way of rendering \n// Manually using only Javascript to create and render h1 element\n// var h1 = document.createElement('h1');\n// h1.innerHTML='Muneeba Manzoor';\n// document.getElementById('root').appendChild(h1)\n\n// // ----------- Rendering Multiple Elements within a render() --------------\n// ReactDOM.render( \n//   <div>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a div tag to wrap all the element tags into te main div tag</p>\n//   </div> , document.getElementById('root'))\n\n// In v16.X.X of react, its possible for render to return an array of elements/\n// ReactDOM.render( [\n//   <h1>Rendering two elements Together with the help of Array</h1>,\n//   <p>Use a Square Bracket to wrap all the element tags into the main div tag separated by commas</p>,\n//   ], document.getElementById('root'))\n\n// // --------- React.Fragment -----------\n// ReactDOM.render( \n//   <React.Fragment>\n//   <h1>Rendering two elements Together</h1>\n//   <p>Use a React.Fragment tag or empty tags \"< ></>\" to wrap all the element tags into te main tag</p>\n//   </React.Fragment> , document.getElementById('root'))\n\n// // ---------- Challenge Time ------------\n// ReactDOM.render(\n//   <>\n//     <h1>Netflix Series</h1>\n//     <p>A list of top 5 series on Netflix:</p>\n//     <ol>\n//       <li>Prison Break</li>\n//       <li>Money Heist</li>\n//       <li>YOU</li>\n//       <li>Breaking Bad</li>\n//       <li>Farzi</li>\n//     </ol>\n//   </>\n//   , document.getElementById('root')\n// )\n\n// ----------- Using JS expressions in JSX using {} -----------\n// We can not write statements in {}\n// var myname = \"Muneeba Manzoor\";\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {myname}</p>\n//   <p>The sum of two numbers is {2+3}</p>\n//   <p>A random number {Math.random()}</p>\n//   </> , document.getElementById('root'));\n\n// ------------ Template Literals ------------\n// var myname = \"Muneeba Manzoor\";\n// var myAge=23;\n// ReactDOM.render( \n//   <>\n//   <h1>JSX Expression</h1>\n//   <p>My name is {`${myname} and my age is ${myAge}`}</p>\n//   <p>My name is {myname} and my age is {myAge}</p>\n//   <p>{myname + myAge}</p>\n//   </> , document.getElementById('root'));\n\n// -------- Challenge Time-----------\n// var currdatetime = new Date();\n// var currdate = currdatetime.toLocaleDateString();\n// var currtime = currdatetime.toLocaleTimeString();\n// var myName = \"Muneeba Manzoor\"\n// ReactDOM.render( \n//   <>\n//     <h1>My Name is {myName}</h1>\n//     <p>{`The current date is ${currdate}`}</p>\n//     <p>{`The current time is ${currtime}`}</p>\n//   </> , document.getElementById(\"root\")\n// );\n\n// ------------ JSX Attributes --------------\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <p contentEditable=\"true\">This part is all about JSX Attributes</p>\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </> , document.getElementById(\"root\"));\n\n// ---------- CSS Styling and importing CSS files --------------\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <h1 className=\"para\">This part is all about JSX Attributes</h1>\n//   <div className=\"image-div\">\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </div>\n//   </> , document.getElementById(\"root\"));\n\n//-------- Inline and Internal CSS -----------\n// For inline CSS, an object with CSS code is to be created and then the object should be referenced in style tag\n// const heading = {   textAlign: 'center',\n//   color: 'brown',\n//   textTransform: 'capitalize',\n//   fontWeight: 'bold',\n//   textShadow: '0px 2px 4px rgb(224, 67, 20)',\n//   margin: '50px 0',\n//   fontFamily: \"'Josefin Sans', sans-serif\"\n// }\n// const img1 = \"https://picsum.photos/200/300\";\n// const img2 = \"https://picsum.photos/250/300\";\n// const img3 = \"https://picsum.photos/300/300\";\n// const img4 = \"https://picsum.photos/400/300\";\n// const weblink = \"https://www.facebook.com/\"\n// ReactDOM.render(\n//   <>\n//   <h1 style={heading}>This part is all about JSX Attributes</h1>\n//   <div className=\"image-div\">\n//   <img src={img1} alt=\"RandomImage\" />\n//   <img src={img2} alt=\"RandomImage\" />\n//   <img src={img3} alt=\"RandomImage\" />\n//   <a href={weblink}><img src={img4} alt=\"RandomImage\" /></a>\n//   </div>\n//   </> , document.getElementById(\"root\"));\n\n// ------------- Challenge Time - Creating Simple Greeting Website using React JS --------------\nconst currdatetime = new Date();\nconst currtime = currdatetime.getHours();\nvar timeNow;\nlet cssStyle = {};\nif(currtime>=1 && currtime <12){\n  timeNow= \"Good Morning\";\n  cssStyle.append('colo',)\n}\nelse if (currtime>=12 && currtime<19){\n  timeNow= \"Good Evening\";\n}\nelse if(currtime>=19 && currtime<1){ \n  timeNow=\"Good Night\";\n}\n\n\nReactDOM.render(\n  <><div className=\"main-div\">\n    <h1>{`Hello Sir, ${timeNow}`}</h1>\n    </div>\n  </>, document.getElementById('root')\n)\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,QAAQ,MAAM,WAAW,CAAC,CAAC;AAClC,OAAO,aAAa;;AAGpxC,IAAIC,OAAO;AACX,IAAIC,QAAQ,GAAG,CAAC,CAAC;AACjB,IAAGH,QAAQ,IAAE,CAAC,IAAIA,QAAQ,GAAE,EAAE,EAAC;EAC7BE,OAAO,GAAE,cAAc;EACvBC,QAAQ,CAACC,MAAM,CAAC,MAAM,CAAE;AAC1B,CAAC,MACI,IAAIJ,QAAQ,IAAE,EAAE,IAAIA,QAAQ,GAAC,EAAE,EAAC;EACnCE,OAAO,GAAE,cAAc;AACzB,CAAC,MACI,IAAGF,QAAQ,IAAE,EAAE,IAAIA,QAAQ,GAAC,CAAC,EAAC;EACjCE,OAAO,GAAC,YAAY;AACtB;AAGAT,QAAQ,CAACY,MAAM,eACbV,OAAA,CAAAE,SAAA;EAAAS,QAAA,eAAEX,OAAA;IAAKY,SAAS,EAAC,UAAU;IAAAD,QAAA,eACzBX,OAAA;MAAAW,QAAA,EAAM,cAAaJ,OAAQ;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAC5B,iBACL,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}